스프링 - 시큐리티(로그인)
서블릿의 필터와 인터셉터를 이용해 처리한다.
필터 - 서블릿에서 말하는 단순한 필터, 스프링과 무관한 서블릿자원

인터셉터 - 스프링에서 필터와 유사한 역할, 스프링의 빈으로 관리되면서 스프링의
컨텍스트 내에 속한다.

스프링 시큐리티 관련 라이브러리 추가
maven spring-security-web 5.0.6
maven spring-security-core 5.0.6
maven spring-security-taglibs 5.0.6
maven spring-security-config 5.0.6

1.root-context 있는 spring폴더에 security-context.xml 만들기(new-Spring Bean Configuration File)

2.security-context의 namespaces탭 security체크후 source에 spring-security.xsd로 링크 수정

3.web.xml 최하단wer-app태그안에

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

4.맨위쪽 context-param태그안에 param-value태그안에 
/WEB-INF/spring/security-context.xml 추가

시큐리티 제어 구현목록
/sample/all	-> 로그인을 하지않은 사용자도 접근가능
/sample/member	-> 로그인한 사용자만 접근가능
/sample/admin	-> 로그인한 사용자들 중에서 관리자 권한을 가진 사용자만 접근가능


인증을 담당하는 인증 매니터 AuthenticationManager
AuthenticationManager - 인증매니저
ProviderManager - 인증에 대한 처리를 위임함
AuthenticationProvider - 인증제공자(실제 인증 작업을 처리)
UserDetailsService - 권한에 대한 정보를 전달하는 객체

접근제한설정
특정한 url에 접근할 때 인터셉터를 이용해서 접근을 제한
<security:intercept-url />
속성 pattern : url패턴을 의미, access : 권한체크

<security:intercept-url pattern="/sample/all" access="permitAll"/>
<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
토큰 JWT
암호화된 문자열
헤더, 페이로드, 서명 3파트로 구분되어있음
1.Header
토큰의 타입, 서명생성에 어떤 알고리즘이 사용되었는지 저장
ex>
{
	"typ": "JWT",
	"alg": "HS512"
}
2.Payload
사용자에 대한, 혹은 토큰에 대한 속성을 key-value 형태로 저장
토큰에서 사용할 정보의 조각

Claim 표준 스펙
1)setIssuer - iss(Issuer) : 토큰 발급자
2)setSubject - sub(Subject) : 토큰 제목
3)setAudience - and(Audience): 토큰 대상자
4)setExpiration - exp(Expiration Time) : 토큰 만료 시간
5)setNotBefore - nbf(Not Before) : 토큰 활성 날짜(이 날짜 이전의 토큰은 활성화 되지 않음을 보장)
6)setIssuedAt - iat(Issued At) : 토큰 발급 시간
7)setId - jti(JWT Id) : JWT 토큰 식별자(issuer가 여러명일때 이를 구분하기 위한 값)

3.Signature
String concatenated = encodeHeader + "." + encodeClaims
Key key = getMySecretKey()
byte[] signature = hmacSha256(concatenated, key)
Base64로 인코딩한 Header와 Claims를 먼저 만든 후 이를 Key를 통해서 Sign을 하는 방식입니다.

4.JWS 생성
1)JwtBuilder객체를 생성하고 Jwts.builder() 메소드를 이용한다.
2)header파라미터와 claims를 추가하기 위해 JwtBuilder메소드를 호출
3)JWT를 서명하기위해 SecretKey나 PrivateKey를 지정
4)마지막으로 압축하고 서명하기위해 compact()를 호출하고 jws를 생성
SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256);

String jws = Jwts.builder()
	.setSubject("Joe")
	.signWith(key)
	.compact();

5.JWS검증하기
1)Jwts.parserBuilder() 메소드를 사용해서 JwtParserBuilder인스턴스를 생성
2)JWS 서명을 확인하는데 사용할 SecretKey 또는 비대칭 공개키를 지정
3)build() 메소드를 호출하면 thread-safe-JwtParser가 반환됨
4)call the parseClaimsJws(jwtString) 메소드를 호출하면오리지널 signed JWT가 반환됨

String jwtSubject = Jwts.parseBuilder()
		.deserializeJsonWith(new JacksonDeserializer(objectMapper))
		.setSignkey(key)
		.build();

String parseClaimsJws = jwtSubject
			.parseClaimsJws(jws)
			.getBody();

jwt라이브러리 JJwt 의존성

수신 요청에서 인증을 처리
AuthenticationFilter 클래스 생성
OncePerRequestFilter 상속
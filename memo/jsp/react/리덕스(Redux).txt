리덕스
액션(Action)
상태에 어떠한 변화가 필요할때 액션을 발생시킨다.
액션 객체는 type필드를 가지고 있으며
그 외는 추가할 수 있음
{
	type:"SUCCESS",
	data: response.data
}
액션 생성 함수(Action Creator)
액션생성함수는 액션을 만드는 함수
필요한 파라미터를 받아서 액션 객체를 리턴해주는 함수
function addTodo(data){
	return{
		type: "ADD_TODO",
		data: data
	}
}
const addTodo2 = () => { return { type: "ADD_TODO", data: data } }

리듀서(Reducer)
상태의 변화를 일으키는 함수. 두가지의 파라미터를 받음
현재의 상태와 전달받은 액션을 참고하여 새로운 상태를 만들어서 반환
function reducer(state, action){

}

스토어(Store)
리덕스에서는 한 애플리케이션당 하나의 스토어를 생성
현재의 앱상태, 리듀서가 들어가 있음

리덕스 사용하기
1)프로젝트 생성, 라이브러리설치
npx create-react-app learn-redux
npm install redux
npm install react-redux

2)리액트 리덕스 내장함수, 훅함수
* 스토어 생성하기
createStore(리듀서함수)

* 리덕스 스토어 상태 조회하는 훅함수
useSelector(state=>state)

* 리덕스 스토어 디스패치 반환하는 훅함수
useDispatch() ---> dispatch반환 해줌

3)리덕스 모듈 생성 (modules 폴더)
리액트 프로젝트에 리덕스 적용하려면 리덕스 모듈을 만들어야 함
리덕스 모듈이란?
-액션타입, 액션생성함수, 리듀서가 들어있는 javascript 파일.
-여러개의 리덕스 모듈을 생성해서 하나의 리덕스 모듈로 합쳐서 사용

*combineReducers({리덕스모듈객체}) 함수를 사용해서 리덕스 모듈을 합쳐줌
ex> const rootReducer = combineReducers({
	리덕스모듈1: 리덕스모듈1,
	리덕스모듈2: 리덕스모듈2
});
---> 합쳐진 리듀서가 됨

1.counter 모듈 생성
값 더하기, 빼기, 값설정

2.컴포넌트
프리젠테이셔널 컴포넌트 화면 Todos.js
컨테이너 컴포넌트 ContainerTodos.js
key:value ---> property(속성)라고 지칭
key = 문자형
value = 모든 자료형 사용가능
let obj = {key:value};

01. 객체생성

객체 생성자 문법(객체 선언만 하는방법)
let user = new Object();
객체 리터럴 문법(바로 값까지 주는 방법)
let user = {};

ex) let user = {
	name: "green",
	age:30     ;<<안찍어도됨
}

02.property 접근, 추가, 삭제
1)값 접근
user.name --> "green"
user.age --> 30
user["name"] --> "green"
user["age"] --> 30

2)객체에 property 추가
user.isAdmin = true; --> user객체 안에 isAdmin: true 가 추가된 것

3)property 삭제
delete user.age;

4)객체와 함께 쓰는 for문
for in문
for(let key in user){ //객체
	console.log(key);  // 객체의 key값만 출력
	console.log(user[key]);  // 객체의 value값만 출력
}
for of문(배열전용 반복문)
for(let key of user1){
	console.log(user1[key]);
}


자바스크립트에서의 클래스
1.생성자 함수
function User(name, age){
	this = {};	//생략
	this.name = name;
	this.age = age;
	this.sayHi = function(){
		console.log("나는" + this.name + "이다");
	};
	return this;  //생략
}
let user1 = new User("green", 30);
let user2 = new User("blue", 29);


*배열 복사, 병합하기*
방법1. Object.assign()
let user1(새객체) = user(기존객체) <<이렇게 복사하면 값의 주소를 참조하기때문에
user의 값이 바뀌면 user1도 함께 바뀌어버림

** Object.assign() 이걸로 배열 복사하는게 나음
let clone = {};
Object.assign(clone(복사, 병합받을 배열), user(복사,병합 할 배열));
- 복사받을 배열에 user에 없는 프로퍼티가 있으면 없어지지않고 그대로 있음
- 복사받을 배열에 user에 이미 존재하는 속성값이 있다면 값이 user의 값으로 덮어씌워짐

let clone = Object.assign({}, user);  << 이게 더 짧고 좋음

방법2. "..." 스프레드 구문 --> 펼치기
배열이나 객체 목록에 사용되면 목록을 펼쳐줌
let user = { name: "green", age: 3 } == let obj1 = { ...user } // 같은 결과가 나옴

let user = { name: "green", age: 3 }
let obj1 = { ...user, color: "흰색"}
-> obj1 에는 { name: "green", age: 3, color: "흰색" } 이 들어감

방법3. concat() 배열의 요소를 사용해 새로운 배열을 만들거나
기존 배열에 새로운 요소를 추가할때 사용

arr.concat(arg1, arg2, ...)
let arr = [1, 2, 3, 4, 5];
let arr2 = arr.concat(6, 7);
arr2 = [1, 2, 3, 4, 5, 6, 7]; <<이렇게 만들어짐

let arr3 = [7, 8, 9];
let arr4 = arr.concat(arr3);
arr4 = [1, 2, 3, 4, 5, 7, 8, 9]; <<이렇게 만들어짐